--- a/hairtunes.c
+++ b/hairtunes.c
@@ -42,6 +42,8 @@
 #include <fcntl.h>
 #include <ao/ao.h>
 
+#undef AF_INET6
+
 #ifdef FANCY_RESAMPLING
 #include <samplerate.h>
 #endif
--- a/socketlib.c
+++ b/socketlib.c
@@ -38,6 +38,8 @@
 #include <openssl/bio.h>
 #include <openssl/buffer.h>
 
+#undef AF_INET6
+
 int common_setup(struct addrinfo *pAddrInfo)
 {  
   int tSock;
@@ -265,4 +267,4 @@ char *encode_base64(unsigned char *input
   BIO_free_all(b64);
 
   return buff;
-}
\ No newline at end of file
+}
--- a/shairport.c
+++ b/shairport.c
@@ -31,6 +31,8 @@
 #define DONT_USE_HAIRTUNES_MAIN
 #include "hairtunes.c" // couldn't figure out how to allow both mains.
 
+#undef AF_INET6
+
 #ifndef TRUE
 #define TRUE (-1)
 #endif
@@ -299,18 +301,10 @@ void handleClient(int pSock, char *pPass
   len = sizeof addr;
   getsockname(pSock, (struct sockaddr*)&addr, &len);
 
-  // deal with both IPv4 and IPv6:
-  if (addr.ss_family == AF_INET) {
-      slog(LOG_DEBUG_V, "Constructing ipv4 address\n");
-      struct sockaddr_in *s = (struct sockaddr_in *)&addr;
-      port = ntohs(s->sin_port);
-      inet_ntop(AF_INET, &s->sin_addr, ipstr, sizeof ipstr);
-  } else { // AF_INET6
-      slog(LOG_DEBUG_V, "Constructing ipv6 address\n");
-      struct sockaddr_in6 *s = (struct sockaddr_in6 *)&addr;
-      port = ntohs(s->sin6_port);
-      inet_ntop(AF_INET6, &s->sin6_addr, ipstr, sizeof ipstr);
-  }
+  slog(LOG_DEBUG_V, "Constructing ipv4 address\n");
+  struct sockaddr_in *s = (struct sockaddr_in *)&addr;
+  port = ntohs(s->sin_port);
+  inet_ntop(AF_INET, &s->sin_addr, ipstr, sizeof ipstr);
 
   slog(LOG_DEBUG_V, "Peer IP address: %s\n", ipstr);
   slog(LOG_DEBUG_V, "Peer port      : %d\n", port);
